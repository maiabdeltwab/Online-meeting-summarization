# Generated by Django 2.2.10 on 2020-07-17 06:00

import audiofield.fields
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0012_auto_20200408_1155'),
    ]

    operations = [
        migrations.CreateModel(
            name='DataBase_search',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('search_text', models.CharField(max_length=1000, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Friends',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friends', to=settings.AUTH_USER_MODEL)),
                ('user2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user2', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user1', 'user2')},
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Required. 150 characters or fewer', max_length=150, verbose_name='name')),
                ('description', models.CharField(blank=True, max_length=500, null=True, verbose_name='group description')),
                ('group_pic', models.BinaryField(null=True)),
                ('pic_path', models.ImageField(blank=True, null=True, upload_to='upload/images')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('call_start_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('call_state', models.IntegerField(default=0)),
                ('invite_code', models.CharField(max_length=500, null=True)),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='group_creator', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='User_profile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='user_profile', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('profile_pic', models.BinaryField()),
                ('pic_path', models.ImageField(blank=True, null=True, upload_to='upload/images')),
                ('gender', models.CharField(blank=True, max_length=6, null=True)),
                ('birth_date', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Private_messages',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('content_text', models.CharField(max_length=1000, null=True)),
                ('attached_file', models.BinaryField(null=True)),
                ('chat', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='private_chat_id', to='app.Friends')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_sender', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('message_date',),
            },
        ),
        migrations.CreateModel(
            name='Group_messages',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('content_text', models.CharField(max_length=1000, null=True)),
                ('attached_file', models.BinaryField(null=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='message_from_group', to='app.Group')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_member_sender', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('message_date',),
            },
        ),
        migrations.CreateModel(
            name='group_members',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('in_call', models.IntegerField(default=0)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members_group', to='app.Group')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_groups', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='group',
            name='members',
            field=models.ManyToManyField(blank=True, related_name='group_members', through='app.group_members', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Audio_private_call',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Required. 150 characters or fewer', max_length=300, null=True, verbose_name='title')),
                ('state', models.IntegerField(null=True)),
                ('audio_file', models.BinaryField()),
                ('audio_file_path', audiofield.fields.AudioField(blank=True, help_text='Allowed type - .mp3, .wav, .ogg', upload_to='upload/audiofiles')),
                ('stt_file', models.BinaryField(null=True)),
                ('stt_file_path', models.FileField(blank=True, null=True, upload_to='upload/punctuated_text')),
                ('summarization_file', models.BinaryField(null=True)),
                ('sum_file_path', models.FileField(blank=True, null=True, upload_to='upload/text_summarization')),
                ('call_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('user1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calling_user1', to=settings.AUTH_USER_MODEL)),
                ('user2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calling_user2', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Audio_group_call',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Required. 150 characters or fewer', max_length=300, null=True, verbose_name='title')),
                ('state', models.IntegerField(default=0, null=True)),
                ('audio_file', models.BinaryField()),
                ('audio_file_path', models.FileField(blank=True, help_text='Allowed type - .wav', upload_to='upload/audiofiles', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['wav'])])),
                ('stt_file', models.BinaryField(null=True)),
                ('stt_file_path', models.FileField(blank=True, null=True, upload_to='upload/punctuated_text')),
                ('summarization_file', models.BinaryField(null=True)),
                ('sum_file_path', models.FileField(blank=True, null=True, upload_to='upload/text_summarization')),
                ('call_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='call_from_group', to='app.Group')),
            ],
        ),
        migrations.CreateModel(
            name='Friend_requests',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='request_from_user', to=settings.AUTH_USER_MODEL)),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='request_to_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('from_user', 'to_user')},
            },
        ),
        migrations.CreateModel(
            name='Block_list',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='block_from_user', to=settings.AUTH_USER_MODEL)),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='block_to_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('from_user', 'to_user')},
            },
        ),
        migrations.CreateModel(
            name='Block_groups_list',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='block_group', to=settings.AUTH_USER_MODEL)),
                ('to_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='block_to_group', to='app.Group')),
            ],
            options={
                'unique_together': {('from_user', 'to_group')},
            },
        ),
    ]
